/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.11.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id 'org.beryx.jlink' version '3.1.1'
}

javafx {
    version = "23.0.1"
    modules = [ 'javafx.controls' , 'javafx.fxml']
}

launch4j {
  mainClassName = 'org.example.App'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'FileTransferApp'
    }

    jpackage {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
            imageOptions += ['--win-console']
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            installerType = 'dmg'
        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = 'deb'
        }

        imageOptions += [
            '--icon', "${projectDir}/src/main/resources/images/icon.ico"
        ]

        installerOptions += [
            '--name', 'FileTransferApp',
            '--description', 'A JavaFX File Transfer Application',
            '--vendor', 'akimmk',
            '--app-version', '1.0'
        ]
    }

}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'org.java-websocket:Java-WebSocket:1.3.0'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.2.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
    mainModule = 'app'
}

tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from("src/main/resources") {
        include '**/*'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

